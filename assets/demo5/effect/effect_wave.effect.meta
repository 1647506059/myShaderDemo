{
  "ver": "1.0.27",
  "uuid": "132359a2-27c0-4be8-81e5-b197e0d39e12",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\nvarying vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D texture2;\nfloat random(vec2 st){\n  return fract(sin(dot(st.xy, vec2(12.9898 , 78.233))) * 4358.5453123);\n}\nvoid main () {\n  vec3 color = vec3(0.);\n  float t = cc_time.x * 0.6;\n  vec2 off = texture2D(texture2,v_uv0+ t * vec2(.5,.1)).xy;\n  off *= .1;\n  color += texture2D(texture,off + v_uv0).xyz;\n  color *= smoothstep(-.5,1.3,v_uv0.y) - .3;\n  vec2 mouv = v_uv0;\n  mouv.y *= 20.;\n  float n3 = floor(mouv.y);\n  float n4 = random(vec2(n3 , n3)) + .3;\n  vec2 baseuv = v_uv0;\n  vec2 scale = vec2(4. , 3.);\n  baseuv = baseuv * scale;\n  baseuv.x += t * .1 *n4;\n  float c1 = texture2D(texture2,baseuv).x;\n  c1 = smoothstep(0.23 , 0. , c1);\n  color += vec3(c1);\n  gl_FragColor = vec4(color,1.);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform inputData{\n  float u_time;\n};\nin vec4 v_color;\nin vec2 v_uv0;\nuniform sampler2D texture;\nuniform sampler2D texture2;\nfloat random(vec2 st){\n  return fract(sin(dot(st.xy, vec2(12.9898 , 78.233))) * 4358.5453123);\n}\nvoid main () {\n  vec3 color = vec3(0.);\n  float t = cc_time.x * 0.6;\n  vec2 off = texture2D(texture2,v_uv0+ t * vec2(.5,.1)).xy;\n  off *= .1;\n  color += texture2D(texture,off + v_uv0).xyz;\n  color *= smoothstep(-.5,1.3,v_uv0.y) - .3;\n  vec2 mouv = v_uv0;\n  mouv.y *= 20.;\n  float n3 = floor(mouv.y);\n  float n4 = random(vec2(n3 , n3)) + .3;\n  vec2 baseuv = v_uv0;\n  vec2 scale = vec2(4. , 3.);\n  baseuv = baseuv * scale;\n  baseuv.x += t * .1 *n4;\n  float c1 = texture2D(texture2,baseuv).x;\n  c1 = smoothstep(0.23 , 0. , c1);\n  color += vec3(c1);\n  gl_FragColor = vec4(color,1.);\n}"
      }
    }
  ],
  "subMetas": {}
}