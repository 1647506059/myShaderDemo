{
  "ver": "1.0.27",
  "uuid": "a17e8177-1582-47b0-a9a7-d8708d6babaa",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n#endif\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform vec4 colorLeft;\nuniform vec4 colorRight;\nuniform vec4 color1;\nuniform vec4 color2;\nuniform vec4 color3;\nuniform float u_time;\nfloat hashOld12( vec2 p ){\n    return fract( sin(dot(p,vec2(12.9898, 78.233))) * 43758.5453 );\n}\nfloat drawLayer( float scale, vec2 uv ){\n  float co = 0.;\n  vec2 uv1 = uv;\n  uv1 *= scale;\n  vec2 hvtmp = floor( uv1 );\n  float n = hashOld12( vec2(hvtmp.y) );\n  uv1.x += n;\n  vec2 hv = floor( uv1 );\n  vec2 fr = fract( uv1 );\n  float circle = distance( fr, vec2(.5) );\n  float radius = hashOld12( hv );\n  float strength = radius;\n  radius = radius * 0.3 + 0.1;\n  float f1 = mod( floor(radius*10.), 2. );\n  radius *= f1;\n  circle = smoothstep(radius - .02 * scale,radius,circle);\n  circle = 1. - circle;\n  strength *= 1. / scale * 6.;\n  circle *= strength;\n  co += circle;\n  return co;\n}\nvoid main () {\n  vec2 uv = vec2(v_uv0.x,v_uv0.y);\n  vec3 co = vec3( 0. );\n  co += mix( colorLeft, colorRight, uv.x ).xyz;\n  vec4 carr[3];\n  carr[0] = color1;\n  carr[1] = color2;\n  carr[2] = color3;\n  for( int i=0; i<3; ++i ){\n    float idx = float( i );\n    float p1 = idx * 5. + 3.;\n    vec2 uvoff = vec2( hashOld12( vec2(p1) ), hashOld12( vec2( p1 * 10.0 ) ) );\n    uvoff = uvoff * u_time * .1;\n    vec2 p2 = vec2( uv.x, uv.y ) + uvoff;\n    float layer = drawLayer( p1, p2 );\n    co += layer * carr[i].xyz;\n  }\n  gl_FragColor = vec4( co, 1. );\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nuniform Constantsl {\n  vec4 colorLeft;\n  vec4 colorRight;\n  vec4 color1;\n  vec4 color2;\n  vec4 color3;\n  float u_time;\n};\nfloat hashOld12( vec2 p ){\n    return fract( sin(dot(p,vec2(12.9898, 78.233))) * 43758.5453 );\n}\nfloat drawLayer( float scale, vec2 uv ){\n  float co = 0.;\n  vec2 uv1 = uv;\n  uv1 *= scale;\n  vec2 hvtmp = floor( uv1 );\n  float n = hashOld12( vec2(hvtmp.y) );\n  uv1.x += n;\n  vec2 hv = floor( uv1 );\n  vec2 fr = fract( uv1 );\n  float circle = distance( fr, vec2(.5) );\n  float radius = hashOld12( hv );\n  float strength = radius;\n  radius = radius * 0.3 + 0.1;\n  float f1 = mod( floor(radius*10.), 2. );\n  radius *= f1;\n  circle = smoothstep(radius - .02 * scale,radius,circle);\n  circle = 1. - circle;\n  strength *= 1. / scale * 6.;\n  circle *= strength;\n  co += circle;\n  return co;\n}\nvoid main () {\n  vec2 uv = vec2(v_uv0.x,v_uv0.y);\n  vec3 co = vec3( 0. );\n  co += mix( colorLeft, colorRight, uv.x ).xyz;\n  vec4 carr[3];\n  carr[0] = color1;\n  carr[1] = color2;\n  carr[2] = color3;\n  for( int i=0; i<3; ++i ){\n    float idx = float( i );\n    float p1 = idx * 5. + 3.;\n    vec2 uvoff = vec2( hashOld12( vec2(p1) ), hashOld12( vec2( p1 * 10.0 ) ) );\n    uvoff = uvoff * u_time * .1;\n    vec2 p2 = vec2( uv.x, uv.y ) + uvoff;\n    float layer = drawLayer( p1, p2 );\n    co += layer * carr[i].xyz;\n  }\n  gl_FragColor = vec4( co, 1. );\n}"
      }
    }
  ],
  "subMetas": {}
}