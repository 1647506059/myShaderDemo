{
  "ver": "1.0.27",
  "uuid": "5a50aa34-b54f-4756-9025-ae25d9737392",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform sampler2D noiseTex;\nuniform vec4 u_brightness;\nuniform vec4 u_middle;\nuniform vec4 u_dark;\n#if USE_ALPHA_TEST\n#endif\nuniform vec4 cc_time;\nvarying vec4 v_color;\n#if USE_TEXTURE\nvarying vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec2 uv = v_uv0;\n  uv.y += cc_time.x * 0.6;\n  vec3 color = vec3(0.0);\n  float n = 0.0;\n  #if USE_TEXTURE\n    n = texture2D(texture,uv).x;\n  #else\n    n = texture2D(noiseTex,uv).x;\n  #endif\n  float p1 = smoothstep(0.0,0.7,v_uv0.y);\n  float p2 = smoothstep(0.0,0.7,v_uv0.y - 0.25);\n  float p3 = smoothstep(0.0,0.7,v_uv0.y - 0.40);\n  float f1 = step(n , p1);\n  float f2 = step(n , p2);\n  float f3 = step(n , p3);\n  float r1 = f1 - f2;\n  float r2 = f2 - f3;\n  float r3 = f3;\n  color = (u_dark * r3 + u_middle * r2 + u_brightness * r1).rgb;\n  gl_FragColor = vec4(color,f1);\n}"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\nprecision highp float;\nuniform sampler2D noiseTex;\nuniform inputData{\n  vec4 u_brightness;\n  vec4 u_middle;\n  vec4 u_dark;\n  float u_time;\n};\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nin vec4 v_color;\n#if USE_TEXTURE\nin vec2 v_uv0;\nuniform sampler2D texture;\n#endif\nvoid main () {\n  vec2 uv = v_uv0;\n  uv.y += cc_time.x * 0.6;\n  vec3 color = vec3(0.0);\n  float n = 0.0;\n  #if USE_TEXTURE\n    n = texture2D(texture,uv).x;\n  #else\n    n = texture2D(noiseTex,uv).x;\n  #endif\n  float p1 = smoothstep(0.0,0.7,v_uv0.y);\n  float p2 = smoothstep(0.0,0.7,v_uv0.y - 0.25);\n  float p3 = smoothstep(0.0,0.7,v_uv0.y - 0.40);\n  float f1 = step(n , p1);\n  float f2 = step(n , p2);\n  float f3 = step(n , p3);\n  float r1 = f1 - f2;\n  float r2 = f2 - f3;\n  float r3 = f3;\n  color = (u_dark * r3 + u_middle * r2 + u_brightness * r1).rgb;\n  gl_FragColor = vec4(color,f1);\n}"
      }
    }
  ],
  "subMetas": {}
}